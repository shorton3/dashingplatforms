// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_codegen.cpp:381


#include "platformConfigC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "platformConfigC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__ARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__ARG_TRAITS_
  
  template<>
  class Arg_Traits<platformConfig::platformConfigLogLevel>
    : public
        Var_Size_Arg_Traits_T<
            platformConfig::platformConfigLogLevel,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevel>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__ARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<platformConfig::platformConfigLogLevels>
    : public
        Var_Size_Arg_Traits_T<
            platformConfig::platformConfigLogLevels,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevels>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_platformConfig_platformConfigLogLevel[] =
      {
        { "subsystemEnum", &CORBA::_tc_short },
        { "subsystemName", &CORBA::_tc_string },
        { "severityLevel", &CORBA::_tc_short }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_platformConfig_platformConfigLogLevel (
  ::CORBA::tk_struct,
  "IDL:platformConfig/platformConfigLogLevel:1.0",
  "platformConfigLogLevel",
  _tao_fields_platformConfig_platformConfigLogLevel,
  3);

namespace platformConfig
{
  ::CORBA::TypeCode_ptr const _tc_platformConfigLogLevel =
    &_tao_tc_platformConfig_platformConfigLogLevel;
}



// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:66

void 
platformConfig::platformConfigLogLevel::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  platformConfigLogLevel *_tao_tmp_pointer =
    static_cast<platformConfigLogLevel *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS_CS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS_CS_

platformConfig::platformConfigLogLevels::platformConfigLogLevels (void)
{}

platformConfig::platformConfigLogLevels::platformConfigLogLevels (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        platformConfigLogLevel
      >
    (max)
{}

platformConfig::platformConfigLogLevels::platformConfigLogLevels (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    platformConfig::platformConfigLogLevel * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        platformConfigLogLevel
      >
    (max, length, buffer, release)
{}

platformConfig::platformConfigLogLevels::platformConfigLogLevels (
    const platformConfigLogLevels &seq
  )
  : TAO::unbounded_value_sequence<
        platformConfigLogLevel
      >
    (seq)
{}

platformConfig::platformConfigLogLevels::~platformConfigLogLevels (void)
{}

void platformConfig::platformConfigLogLevels::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  platformConfigLogLevels * _tao_tmp_pointer =
    static_cast<platformConfigLogLevels *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_platformConfig_platformConfigLogLevels_GUARD
#define _TAO_TYPECODE_platformConfig_platformConfigLogLevels_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        platformConfig_platformConfigLogLevels_0 (
          ::CORBA::tk_sequence,
          &platformConfig::_tc_platformConfigLogLevel,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_platformConfig_platformConfigLogLevels_0 =
        &platformConfig_platformConfigLogLevels_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_platformConfig_platformConfigLogLevels_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_platformConfig_platformConfigLogLevels (
    ::CORBA::tk_alias,
    "IDL:platformConfig/platformConfigLogLevels:1.0",
    "platformConfigLogLevels",
    &TAO::TypeCode::tc_platformConfig_platformConfigLogLevels_0);
  
namespace platformConfig
{
  ::CORBA::TypeCode_ptr const _tc_platformConfigLogLevels =
    &_tao_tc_platformConfig_platformConfigLogLevels;
}



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for platformConfig::platformConfig_I.

platformConfig::platformConfig_I_ptr
TAO::Objref_Traits<platformConfig::platformConfig_I>::duplicate (
    platformConfig::platformConfig_I_ptr p)
{
  return platformConfig::platformConfig_I::_duplicate (p);
}

void
TAO::Objref_Traits<platformConfig::platformConfig_I>::release (
    platformConfig::platformConfig_I_ptr p)
{
  ::CORBA::release (p);
}

platformConfig::platformConfig_I_ptr
TAO::Objref_Traits<platformConfig::platformConfig_I>::nil (void)
{
  return platformConfig::platformConfig_I::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<platformConfig::platformConfig_I>::marshal (
    const platformConfig::platformConfig_I_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void platformConfig::platformConfig_I::getLogLevels (
    ::platformConfig::platformConfigLogLevels_out logLevels)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_platformConfig_I_Proxy_Broker_ == 0)
    {
      platformConfig_platformConfig_I_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::platformConfig::platformConfigLogLevels>::out_arg_val _tao_logLevels (logLevels);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_logLevels
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "getLogLevels",
      12,
      this->the_TAO_platformConfig_I_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void platformConfig::platformConfig_I::setLogLevel (
    const ::platformConfig::platformConfigLogLevel & logLevel)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_platformConfig_I_Proxy_Broker_ == 0)
    {
      platformConfig_platformConfig_I_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::platformConfig::platformConfigLogLevel>::in_arg_val _tao_logLevel (logLevel);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_logLevel
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setLogLevel",
      11,
      this->the_TAO_platformConfig_I_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void platformConfig::platformConfig_I::setLogLevels (
    const ::platformConfig::platformConfigLogLevels & logLevels)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_platformConfig_I_Proxy_Broker_ == 0)
    {
      platformConfig_platformConfig_I_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::platformConfig::platformConfigLogLevels>::in_arg_val _tao_logLevels (logLevels);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_logLevels
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setLogLevels",
      12,
      this->the_TAO_platformConfig_I_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

platformConfig::platformConfig_I::platformConfig_I (void)
 : the_TAO_platformConfig_I_Proxy_Broker_ (0)
{
  this->platformConfig_platformConfig_I_setup_collocation ();
}

void
platformConfig::platformConfig_I::platformConfig_platformConfig_I_setup_collocation ()
{
  if (::platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_platformConfig_I_Proxy_Broker_ =
        ::platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer (this);
    }
}

platformConfig::platformConfig_I::~platformConfig_I (void)
{}

void 
platformConfig::platformConfig_I::_tao_any_destructor (void *_tao_void_pointer)
{
  platformConfig_I *_tao_tmp_pointer =
    static_cast<platformConfig_I *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

platformConfig::platformConfig_I_ptr
platformConfig::platformConfig_I::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<platformConfig_I>::narrow (
        _tao_objref,
        "IDL:platformConfig/platformConfig_I:1.0",
        platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer
      );
}

platformConfig::platformConfig_I_ptr
platformConfig::platformConfig_I::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<platformConfig_I>::unchecked_narrow (
        _tao_objref,
        "IDL:platformConfig/platformConfig_I:1.0",
        platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer
      );
}

platformConfig::platformConfig_I_ptr
platformConfig::platformConfig_I::_duplicate (platformConfig_I_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
platformConfig::platformConfig_I::_tao_release (platformConfig_I_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
platformConfig::platformConfig_I::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:platformConfig/platformConfig_I:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* platformConfig::platformConfig_I::_interface_repository_id (void) const
{
  return "IDL:platformConfig/platformConfig_I:1.0";
}

::CORBA::Boolean
platformConfig::platformConfig_I::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_platformConfig_platformConfig_I (
    ::CORBA::tk_objref,
    "IDL:platformConfig/platformConfig_I:1.0",
    "platformConfig_I");
  
namespace platformConfig
{
  ::CORBA::TypeCode_ptr const _tc_platformConfig_I =
    &_tao_tc_platformConfig_platformConfig_I;
}



// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const platformConfig::platformConfigLogLevel &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<platformConfig::platformConfigLogLevel *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevel>::insert_copy (
        _tao_any,
        platformConfig::platformConfigLogLevel::_tao_any_destructor,
        platformConfig::_tc_platformConfigLogLevel,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    platformConfig::platformConfigLogLevel *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevel>::insert (
      _tao_any,
      platformConfig::platformConfigLogLevel::_tao_any_destructor,
      platformConfig::_tc_platformConfigLogLevel,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    platformConfig::platformConfigLogLevel *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const platformConfig::platformConfigLogLevel *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const platformConfig::platformConfigLogLevel *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevel>::extract (
        _tao_any,
        platformConfig::platformConfigLogLevel::_tao_any_destructor,
        platformConfig::_tc_platformConfigLogLevel,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_sequence/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const platformConfig::platformConfigLogLevels &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<platformConfig::platformConfigLogLevels *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevels>::insert_copy (
        _tao_any,
        platformConfig::platformConfigLogLevels::_tao_any_destructor,
        platformConfig::_tc_platformConfigLogLevels,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    platformConfig::platformConfigLogLevels *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevels>::insert (
      _tao_any,
      platformConfig::platformConfigLogLevels::_tao_any_destructor,
      platformConfig::_tc_platformConfigLogLevels,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    platformConfig::platformConfigLogLevels *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const platformConfig::platformConfigLogLevels *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const platformConfig::platformConfigLogLevels *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<platformConfig::platformConfigLogLevels>::extract (
        _tao_any,
        platformConfig::platformConfigLogLevels::_tao_any_destructor,
        platformConfig::_tc_platformConfigLogLevels,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<platformConfig::platformConfig_I>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace platformConfig
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      platformConfig_I_ptr _tao_elem)
  {
    platformConfig_I_ptr _tao_objptr =
      platformConfig_I::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      platformConfig_I_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<platformConfig_I>::insert (
        _tao_any,
        platformConfig_I::_tao_any_destructor,
        _tc_platformConfig_I,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      platformConfig_I_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<platformConfig_I>::extract (
          _tao_any,
          platformConfig_I::_tao_any_destructor,
          _tc_platformConfig_I,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    platformConfig::platformConfig_I_ptr _tao_elem)
{
  platformConfig::platformConfig_I_ptr _tao_objptr =
    platformConfig::platformConfig_I::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    platformConfig::platformConfig_I_ptr *_tao_elem)
{
  TAO::Any_Impl_T<platformConfig::platformConfig_I>::insert (
      _tao_any,
      platformConfig::platformConfig_I::_tao_any_destructor,
      platformConfig::_tc_platformConfig_I,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    platformConfig::platformConfig_I_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<platformConfig::platformConfig_I>::extract (
        _tao_any,
        platformConfig::platformConfig_I::_tao_any_destructor,
        platformConfig::_tc_platformConfig_I,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const platformConfig::platformConfigLogLevel &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.subsystemEnum) &&
    (strm << _tao_aggregate.subsystemName.in ()) &&
    (strm << _tao_aggregate.severityLevel);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    platformConfig::platformConfigLogLevel &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.subsystemEnum) &&
    (strm >> _tao_aggregate.subsystemName.out ()) &&
    (strm >> _tao_aggregate.severityLevel);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_platformConfig_platformConfigLogLevels_CPP_
#define _TAO_CDR_OP_platformConfig_platformConfigLogLevels_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const platformConfig::platformConfigLogLevels &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    platformConfig::platformConfigLogLevels &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_platformConfig_platformConfigLogLevels_CPP_ */

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const platformConfig::platformConfig_I_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    platformConfig::platformConfig_I_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::platformConfig::platformConfig_I RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



