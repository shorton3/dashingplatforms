// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_codegen.cpp:703

#ifndef _TAO_IDL_CPPSOURCE_PLATFORMCONFIGS_CPP_
#define _TAO_IDL_CPPSOURCE_PLATFORMCONFIGS_CPP_


#include "platformConfigS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Basic_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "platformConfigS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__SARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__SARG_TRAITS_
  
  template<>
  class SArg_Traits<platformConfig::platformConfigLogLevel>
    : public
        Var_Size_SArg_Traits_T<
            platformConfig::platformConfigLogLevel,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevel>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__SARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__SARG_TRAITS_
  
  template<>
  class SArg_Traits<platformConfig::platformConfigLogLevels>
    : public
        Var_Size_SArg_Traits_T<
            platformConfig::platformConfigLogLevels,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevels>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__ARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVEL__ARG_TRAITS_
  
  template<>
  class Arg_Traits<platformConfig::platformConfigLogLevel>
    : public
        Var_Size_Arg_Traits_T<
            platformConfig::platformConfigLogLevel,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevel>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__ARG_TRAITS_)
#define _PLATFORMCONFIG_PLATFORMCONFIGLOGLEVELS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<platformConfig::platformConfigLogLevels>
    : public
        Var_Size_Arg_Traits_T<
            platformConfig::platformConfigLogLevels,
            TAO::Any_Insert_Policy_Stream <platformConfig::platformConfigLogLevels>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_interface.cpp:1549

class TAO_platformConfig_platformConfig_I_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_platformConfig_platformConfig_I_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_platformConfig_platformConfig_I_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18,  0,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18,  0,
     18, 18,  0,  5, 18,  5, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18,  0, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18,  0,  0, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18,
#else
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
     18, 18, 18, 18, 18,  0, 18,  0, 18, 18,
      0,  5, 18,  5, 18, 18, 18, 18,  0, 18,
     18, 18, 18, 18, 18,  0,  0, 18, 18, 18,
     18, 18, 18, 18, 18, 18, 18, 18,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_platformConfig_platformConfig_I_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 17,
      HASH_VALUE_RANGE = 13,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_platformConfig::platformConfig_I::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_platformConfig::platformConfig_I::_component_skel, 0},
      {"setLogLevel", &POA_platformConfig::platformConfig_I::setLogLevel_skel, 0},
      {"setLogLevels", &POA_platformConfig::platformConfig_I::setLogLevels_skel, 0},
      {"_non_existent", &POA_platformConfig::platformConfig_I::_non_existent_skel, 0},
      {"_repository_id", &POA_platformConfig::platformConfig_I::_repository_id_skel, 0},
      {"_interface", &POA_platformConfig::platformConfig_I::_interface_skel, 0},
      {"",0,0},
      {"getLogLevels", &POA_platformConfig::platformConfig_I::getLogLevels_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_platformConfig_platformConfig_I_Perfect_Hash_OpTable tao_platformConfig_platformConfig_I_optable;

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:958

TAO::Collocation_Proxy_Broker *
platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_Initializer (size_t)
{
  platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer = 
    platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
platformConfig__TAO_platformConfig_I_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:103

POA_platformConfig::platformConfig_I::platformConfig_I (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_platformConfig_platformConfig_I_optable;
}

POA_platformConfig::platformConfig_I::platformConfig_I (const platformConfig_I& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_platformConfig::platformConfig_I::~platformConfig_I (void)
{
}
namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class getLogLevels_platformConfig_I
    : public TAO::Upcall_Command
  {
  public:
    inline getLogLevels_platformConfig_I (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::platformConfig::platformConfigLogLevels>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::platformConfig::platformConfigLogLevels> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->getLogLevels (
        arg_1);
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_platformConfig::platformConfig_I::getLogLevels_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::platformConfig::platformConfigLogLevels>::out_arg_val _tao_logLevels;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_logLevels
    };
  
  static size_t const nargs = 2;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);

  getLogLevels_platformConfig_I command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class setLogLevel_platformConfig_I
    : public TAO::Upcall_Command
  {
  public:
    inline setLogLevel_platformConfig_I (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::platformConfig::platformConfigLogLevel>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::platformConfig::platformConfigLogLevel> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->setLogLevel (
        arg_1);
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_platformConfig::platformConfig_I::setLogLevel_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::platformConfig::platformConfigLogLevel>::in_arg_val _tao_logLevel;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_logLevel
    };
  
  static size_t const nargs = 2;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);

  setLogLevel_platformConfig_I command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class setLogLevels_platformConfig_I
    : public TAO::Upcall_Command
  {
  public:
    inline setLogLevels_platformConfig_I (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::platformConfig::platformConfigLogLevels>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::platformConfig::platformConfigLogLevels> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->setLogLevels (
        arg_1);
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_platformConfig::platformConfig_I::setLogLevels_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::platformConfig::platformConfigLogLevels>::in_arg_val _tao_logLevels;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_logLevels
    };
  
  static size_t const nargs = 2;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);

  setLogLevels_platformConfig_I command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:169

namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _is_a_platformConfig_I_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_platformConfig_I_Upcall_Command (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_platformConfig::platformConfig_I::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);
  
  _is_a_platformConfig_I_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _non_existent_platformConfig_I_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_platformConfig_I_Upcall_Command (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_platformConfig::platformConfig_I::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);
  
  _non_existent_platformConfig_I_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}
namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _repository_id_platformConfig_I_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_platformConfig_I_Upcall_Command (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_platformConfig::platformConfig_I::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);
  
  _repository_id_platformConfig_I_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:508

void POA_platformConfig::platformConfig_I::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == false)
    {
      throw ::CORBA::MARSHAL ();
    }
}

namespace POA_platformConfig
{
  
  
  // TAO_IDL - Generated from
  // ../../../TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _get_component_platformConfig_I_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_platformConfig_I_Upcall_Command (
      POA_platformConfig::platformConfig_I * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_platformConfig::platformConfig_I * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_platformConfig::platformConfig_I::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_platformConfig::platformConfig_I * const impl =
    static_cast<POA_platformConfig::platformConfig_I *> (servant);
  
  _get_component_platformConfig_I_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_platformConfig::platformConfig_I::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:platformConfig/platformConfig_I:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_platformConfig::platformConfig_I::_interface_repository_id (void) const
{
  return "IDL:platformConfig/platformConfig_I:1.0";
}

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:902

void POA_platformConfig::platformConfig_I::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// ../../../TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:852

platformConfig::platformConfig_I *
POA_platformConfig::platformConfig_I::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::platformConfig::platformConfig_I STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        platformConfig__TAO_platformConfig_I_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

