package ems.idls.alarms;


/**
* ems/idls/alarms/_alarmInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from alarms.idl
* Tuesday, January 15, 2015 5:02:23 PM CST
*/


/**
    * Command/Method interface
    */
public class _alarmInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements ems.idls.alarms.alarmInterface
{


  /**
         * Retrieve the list of outstanding Alarms from the EMS. This is used when
         * the client first establishes connection and when the client wishes to 
         * resynchronize its outstanding alarms list.
         */
  public void getOutstandingAlarms (ems.idls.alarms.AlarmNotificationSequenceHolder outstandingAlarms)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getOutstandingAlarms", true);
                $in = _invoke ($out);
                outstandingAlarms.value = ems.idls.alarms.AlarmNotificationSequenceHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getOutstandingAlarms (outstandingAlarms        );
            } finally {
                _releaseReply ($in);
            }
  } // getOutstandingAlarms


  /**
         * Retrieve the list of all possible Alarms in the system. This list includes
         * all Alarm descriptors and attributes and should be used by the client
         * entity for displaying outstanding alarms.
         */
  public void getAlarmInventory (ems.idls.alarms.AlarmInformationSequenceHolder alarmInventory)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAlarmInventory", true);
                $in = _invoke ($out);
                alarmInventory.value = ems.idls.alarms.AlarmInformationSequenceHelper.read ($in);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAlarmInventory (alarmInventory        );
            } finally {
                _releaseReply ($in);
            }
  } // getAlarmInventory

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:alarms/alarmInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _alarmInterfaceStub
