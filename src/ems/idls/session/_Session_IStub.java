package ems.idls.session;


/**
* ems/idls/session/_Session_IStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from session.idl
* Tuesday, January 15, 2015 5:02:24 PM CST
*/


/**
   * <p> The Session_I interface provides capabilities to manage the
   * client-server connection.
   * Its main purpose is to enable either a client or server to detect the 
   * loss of communication with the associated party.</p>
   *
   * <p>For a single communication session between an NMS and an EMS, there are
   * two Session_I objects.  One is maintained on the NMS; the other one is maintained
   * on the EMS.  The Session_I object maintained on the EMS is actually an EmsSession_I, while
   * the Session_I object maintained on the NMS is actually an NmsSession_I
   * (both inherit from Session_I).</p>
   *
   * <p>Each Session_I object is responsible to "ping" the other Session_I object
   * periodically to detect communication failures.  Exactly when this is done is up to
   * the implementation.</p>
   *
   * <p>When a Session_I object detects a communication failure, or when the endSession
   * operation is called on it, all resources allocated with that communication session
   * must be freed and the Session_I object must be deleted.</p>
   **/
public class _Session_IStub extends org.omg.CORBA.portable.ObjectImpl implements ems.idls.session.Session_I
{


  /**
     * <p>This attribute contains a reference to the Session_I on the other side (NMS/EMS)
     * to which the object is associated.
     * This attribute can be checked to make sure the NmsSession_I/EmsSession_I association is
     * still valid (in particular in case of communication failures).</p>
     **/
  public ems.idls.session.Session_I associatedSession ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_associatedSession", true);
                $in = _invoke ($out);
                ems.idls.session.Session_I $result = ems.idls.session.Session_IHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return associatedSession (        );
            } finally {
                _releaseReply ($in);
            }
  } // associatedSession


  /**
     * <p> Allows for the detection of loss of communication.
     * It is implementation specific to differenciate intermittent 
     * problems from loss of connection.</p>
     **/
  public void ping ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                ping (        );
            } finally {
                _releaseReply ($in);
            }
  } // ping


  /**
     * <p> Allows for a controlled disconnect between parties.
     * All resources allocated for the session are deleted by operation.</p>
     **/
  public void endSession ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("endSession", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                endSession (        );
            } finally {
                _releaseReply ($in);
            }
  } // endSession

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:mtnm.tmforum.org/session/Session_I:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _Session_IStub
