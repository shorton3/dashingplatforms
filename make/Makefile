#---------------------------------------------------------------------------
#  (C) 1999 - 2004 Jacob Dreyer - Geotechnical Software Services
#  jacob.dreyer@geosoft.no - http://geosoft.no
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, 
#  MA  02111-1307, USA.
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
#
#  GnuMake crash course:
#
#  target : depends
#    rule
#
#  target  - the parameter given to make. I.e. what to build
#  depends - file or other targets target depends on
#  rule    - how to create target (note that rule is preceeded by a TAB char)
#  $(VAR)  - environment variable or variable defined above
#  $@      - Current target
#  $*      - Current target without extension
#  $<      - Current dependency
#
#---------------------------------------------------------------------------
#
#  NOTE: ACE/TAO 'make install' now places libraries in /usr/local/lib and
#    binaries in /usr/local/bin
#
#---------------------------------------------------------------------------
#
#  Directories
#
#---------------------------------------------------------------------------

SourceDir        = $(DEV_ROOT)/src
TargetDir        = $(DEV_ROOT)/obj
LibDir           = $(DEV_ROOT)/lib
MakeDir          = $(DEV_ROOT)/make
BinDir           = $(DEV_ROOT)/bin
DocsDir          = $(DEV_ROOT)/docs
CurrentDir       = $(CURDIR)

BuildTag         = "NO_BUILD_TAG_SPECIFIED"
# i686 for pentium, k8 for 64 bit
CPU_ARCH         = "k8"

ifdef Source
  Package          = $(subst $(SourceDir)/,,$(CurrentDir))
  PackageList      = $(Package)
  PackageSourceDir = $(SourceDir)/$(Package)
  PackageTargetDir = $(TargetDir)/$(Package)
  JavaMainClass    = $(subst /,.,$(Package)).$(Main)
else
  PackageList      = $(Packages) $(JavaPackages)
endif

PackageListLoop  = $(patsubst %,$(SourceDir)/%/.loop,$(PackageList))

JRE              = $(JAVA_HOME)/jre/lib/rt.jar

ifdef IS_UNIX
  X = :
else
  X = \;
endif


#---------------------------------------------------------------------------
#
#  Classification of files
#
#---------------------------------------------------------------------------

# Source
JavaFiles              = $(filter %.java,  $(Source))
CppFiles               = $(filter %.cpp,    $(Source))
CFiles                 = $(filter %.c,     $(Source))
FortranFiles           = $(filter %.f,     $(Source))
CorbaFiles             = $(filter %.idl,   $(Source))
OtherSourceFiles       = $(filter-out $(JavaFiles) $(CppFiles) $(CFiles) \
					$(FortranFiles) $(CorbaFiles), \
					$(Source))
ManifestFile           = $(PackageSourceDir)/Manifest
SourceFiles            = $(JavaFiles:%.java=  $(PackageSourceDir)/%.java)\
			 $(CppFiles:%.cpp=    $(PackageSourceDir)/%.cpp)\
			 $(CFiles:%.c=        $(PackageSourceDir)/%.c)\
			 $(FortranFiles:%.f=  $(PackageSourceDir)/%.f)
 

# Target
JavaClassFiles         = $(JavaFiles:%.java=  $(PackageTargetDir)/%.class)
JavaClassFilesRel      = $(JavaFiles:%.java=  $(Package)/%.class)
RmiStubFiles           = $(RmiSource:%.java=  $(PackageTargetDir)/%_Stub.class)
RmiSkeletonFiles       = $(RmiSource:%.java=  $(PackageTargetDir)/%_Skel.class)
JniClassFiles          = $(JniSource:%.java=  $(PackageTargetDir)/%.class)
JniHeaders             = $(JniSource:%.java=  $(PackageSourceDir)/%.h)
ObjectFiles            = $(CFiles:%.c=        $(PackageTargetDir)/%.o)\
		         $(CppFiles:%.cpp=    $(PackageTargetDir)/%.o)\
  		         $(FortranFiles:%.f=  $(PackageTargetDir)/%.o)
OtherTargetFiles       = $(OtherSourceFiles:%=$(PackageTargetDir)/%)
  
ThirdPartyJarsTmp = $(patsubst %,$(LibDir)/%,$(JavaLibraries))
ThirdPartyJars    = $(subst $(Space),$(X),$(ThirdPartyJarsTmp))
  
ifneq "$(words $(JavaFiles))" "0"
  JavaPackageName   = $(subst /,.,$(Package))
  JarFile           = $(LibDir)/$(subst /,,$(Package)).jar
endif
ifneq  "$(words $(ObjectFiles))" "0"
  DependencyFile    = $(PackageSourceDir)/Makedepend
  # If there is ONLY 1 object file in the list, do not create the shared library:
  #  ifneq "$(words $(ObjectFiles))" "1"
  SharedLibrary     = $(LibDir)/lib$(subst /,,$(Package)).so 
  StaticLibrary     = $(LibDir)/lib$(subst /,,$(Package)).a
  #  endif
  ifneq "$(Main)" ""
    Executable        = $(BinDir)/$(Main)
  endif
endif

#
# Misc
#
ClassPath        = $(JRE)$(X)$(TargetDir)$(X)$(ThirdPartyJars)
JavaPackageNames = $(subst /,.,$(JavaPackages))
IncludePath      = -I$(SourceDir) $(IncludeDirs:%=-I%)
LibDirs          = -L$(LibDir)    $(LibraryDirs:%=-L%)
LocalLibs        = $(subst /,,$(Packages))
LibList          = $(LocalLibs:%=-l%) $(Libraries:%=-l%)
  
  
  
#---------------------------------------------------------------------------
#
#  Tools & Options
#
#---------------------------------------------------------------------------
Print                  = @echo
Copy                   = cp
CCompiler              = gcc
CppCompiler            = g++ 
Linker                 = g++
IDLCompiler            = tao_idl
MakeDepend             = makedepend
MakeDir                = mkdir -p
Delete                 = rm -fr
StaticArchiver         = ar
DynamicArchiver        = g++
FortranCompiler        = f77
JavaCompiler           = $(JAVA_HOME)/bin/javac
JavaIDLCompiler        = $(JAVA_HOME)/bin/idlj
JavaArchiver           = $(JAVA_HOME)/bin/jar
JarSigner              = $(JAVA_HOME)/bin/jarsigner
JavadocGenerator       = $(JAVA_HOME)/bin/javadoc
JniCompiler            = $(JAVA_HOME)/bin/javah
RmiCompiler            = $(JAVA_HOME)/bin/rmic
JavaExecute            = $(JAVA_HOME)/bin/java
DoxygenGenerator       = doxygen
Purify                 = purify
WordCount              = wc
List                   = cat
  
# Add -s to MakeOptions to run in silent mode
MakeOptions            = -k
MakeDependOptions      =
StaticArchiverOptions  = rc
DynamicArchiverOptions = -shared
JavaArchiverOptions    =
JniOptions             =
RmiOptions             = -d $(TargetDir) -classpath $(ClassPath) \
  			 -sourcepath $(SourceDir)
# IDL Compiler no longer generates TIE classes, so -Sc option is deprecated and no longer needed
IDLCompilerOptions     = -GI -o $(IDL_CPP_OUTPUT_DIR)
JavaIDLCompilerOptions = -fall 
FortranOptions         =
# Note that LocalCOptions and LocalCppOptions make be declared in Package Makefiles to
# add additional compile flags
COptions               = -g -Wall -W -Wpointer-arith -march=$(CPU_ARCH) -fPIC -DGCC -D_REENTRANT -DBUILD_LABEL=$(BuildTag)
# -Weffc++ warnings are from Scott Meyer's book, also try -Wold-style-cast, -Woverloaded-virtual
CppOptions             = -g -Wall -W -Wpointer-arith -march=$(CPU_ARCH) -fPIC -DGCC -D_REENTRANT -DBUILD_LABEL=$(BuildTag)
# Added Xlint to display recommended java compiler warnings
JavaCompilerOptions    = -d $(TargetDir) -Xlint -classpath $(ClassPath) \
  			 -sourcepath $(SourceDir) -deprecation 
JavaRunOptions         = -classpath $(ClassPath) 
PurifyOptions          = 
JavadocOptions         = -d $(DocsDir) \
  			 -sourcepath $(SourceDir) \
  			 -classpath $(ClassPath) \
  			 -author \
  			 -package \
  			 -use \
  			 -splitIndex \
  			 -version \
  			 -link file:$(JAVA_HOME)/docs/api \
  			 -windowtitle $(JavadocWindowTitle) \
  			 -doctitle $(JavadocDocTitle) \
  			 -header $(JavadocHeader) \
  			 -bottom $(JavadocFooter)
WordCountOptions       = --lines
  
Empty                  =
Space                  = $(Empty) $(Empty)
  
  
  
#---------------------------------------------------------------------------
#
# Rules
#
#---------------------------------------------------------------------------
  
default : build

%.loop :
	@$(MAKE) $(MakeOptions) -C $(subst .loop,,$@) _$(MAKECMDGOALS)all
  
# Create target directory
$(PackageTargetDir) :
	$(MakeDir) $@

# NOTE: The '@' symbol placed immediately before the $(CppCompiler) or $(CCompiler)
# in the following lines will obscure the actual compile command from being displayed
  
# .c -> .o
$(PackageTargetDir)/%.o : $(PackageSourceDir)/%.c
	$(Print) $@
	$(CCompiler) $(COptions) $(LocalCOptions) -c $(IncludePath) $< -o $@
  
%.o : $(PackageSourceDir)/%.c
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
  
# .cpp -> .o
$(PackageTargetDir)/%.o : $(PackageSourceDir)/%.cpp
	$(Print) $@
	$(CppCompiler) $(CppOptions) $(LocalCppOptions) -c $(IncludePath) $< -o $@
  
%.o : $(PackageSourceDir)/%.cpp
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
  
# .f -> .o
$(PackageTargetDir)/%.o : $(PackageSourceDir)/%.f
	$(Print) $@
	@$(FortranCompiler) $(FortranOptions) -c $< -o $@
  
%.o : $(PackageSourceDir)/%.f
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
  
# .java -> .class
$(PackageTargetDir)/%.class : $(PackageSourceDir)/%.java
	$(Print) $@
	@$(JavaCompiler) $(JavaCompilerOptions) $< 
  
%.class : $(PackageSourceDir)/%.java
	@$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@

# .class -> .h
$(PackageSourceDir)/%.h : $(PackageTargetDir)/%.class
	$(Print) $@
	$(JniCompiler) $(JniOptions) $(JavaPackageName).$*
  
%.h : %.class
	$(MAKE) $(MakeOptions) $(PackageSourceDir)/$@
  
# .o -> .a
$(LibDir)/%.a : $(ObjectFiles)
	$(Print) $@
	@$(StaticArchiver) $(StaticArchiverOptions) $@ $(ObjectFiles)
  
%.a : $(ObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@
  
# .o -> .so
$(LibDir)/%.so : $(ObjectFiles)
	$(Print) $@	
	$(DynamicArchiver) $(ObjectFiles) $(DynamicArchiverOptions) -o $@
  
%.so : $(ObjectFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@
  
# .class -> .jar
$(LibDir)/%.jar : $(JavaClassFiles) $(OtherTargetFiles)
	$(Print) $@
	@cd $(TargetDir); $(JavaArchiver) -cf $@ \
	$(JavaClassFilesRel) $(OtherTargetFiles)
  
%.jar : $(JavaClassFiles) $(OtherTargetFiles)
	$(MAKE) $(MakeOptions) $(LibDir)/$@
  
# .class -> JavaDoc
javadoc : 
	$(Print) $(JavaPackageNames) > $(DEV_ROOT)/packages.tmp
	$(JavadocGenerator) $(JavadocOptions) @$(DEV_ROOT)/packages.tmp
	$(Delete) $(DEV_ROOT)/packages.tmp
	$(Print) Done JavaDoc.

# Doxygen output
doxygen :
	$(Print) Running Doxygen on the following packages: $(PackageList) 
	$(DoxygenGenerator) $(DEV_ROOT)/make/doxygen.conf 
	$(Print) Done Doxygen.  
  
# .class -> _Stub.class 
$(PackageTargetDir)/%_Stub.class : $(PackageTargetDir)/%.class
	$(Print) $@
	$(RmiCompiler) $(RmiOptions) $(JavaPackageName).$*
  
%_Stub.class : %.class
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
  
# .class -> _Skel.class
$(PackageTargetDir)/%_Skel.class : $(PackageTargetDir)/%.class
	$(Print) $@
	$(RmiCompiler) $(RmiOptions) $(JavaPackageName).$*
  
%_Skel.class : %.class
	$(MAKE) $(MakeOptions) $(PackageTargetDir)/$@
  
# Executable
$(Executable) : $(ObjectFiles)
	$(Print) $@
	$(Linker) $(LinkOptions) $(LibDirs) $(LibList) $(ObjectFiles) -o $@
  
# Anything else is just copied from source to target
$(PackageTargetDir)/% : $(PackageSourceDir)/%
	$(Print) $@
	$(Copy) $< $@
  
# make (or make build)
build : $(PackageListLoop)
	$(Print) Done build.
  
_all : _buildall
  
_buildall : \
	$(DependencyFile) \
	$(PackageTargetDir) \
	$(ObjectFiles) \
	$(JavaClassFiles) \
	$(RmiStubFiles) \
	$(RmiSkeletonFiles) \
	$(OtherTargetFiles) \
	$(SharedLibrary) \
	$(StaticLibrary) \
	$(JarFile) \
	$(Executable)
  
# Compile the IDL files - using both C++ and Java. NOTE: For idls to compile, the 
#  Package directory name must contain the substring 'idl'
idl : $(PackageListLoop)
	$(Print) Done idl.

# Note that the Java IDL compiler can only handle one file at a time
_idlall : 
ifneq ($(strip $(CorbaFiles)),)
	$(Print) Invoking C++ IDL compiler on all IDL files...
	$(IDLCompiler) $(IDLCompilerOptions) $(LocalIDLCompilerOptions) $(CorbaFiles) 
	$(Print) Mapped IDL files to C++. 
	@for IDLFile in $(CorbaFiles); do \
	   echo Invoking Java IDL compiler on $$IDLFile; \
	   filename=$$IDLFile; \
	   echo $(JavaIDLCompiler) $(JavaIDLCompilerOptions) \
	      `echo $(LocalJavaIDLCompilerOptions) | sed -e s/TARGET/\$$IDLFile/ -e s/[\.]idl//` $$IDLFile; \
	   $(JavaIDLCompiler) $(JavaIDLCompilerOptions) \
	      `echo $(LocalJavaIDLCompilerOptions) | sed -e s/TARGET/\$$IDLFile/ -e s/[\.]idl//` $$IDLFile; \
	done
	$(Print) Mapped IDL files to Java.
endif
  
# make clean
clean : $(PackageListLoop)
	$(Print) Done clean.	
  
_cleanall :
	$(Delete) $(PackageTargetDir)/* \
		  $(JarFile) \
	          $(SharedLibrary) \
	          $(StaticLibrary) \
	          $(Executable) \
	          $(DependencyFile) \
	          $(DependencyFile).stderr
  
  
# make depend
depend : $(PackageListLoop)
	$(Print) Done dependencies.
  
_dependall : $(DependencyFile)
  
$(DependencyFile) :
	$(Print) $@
	@cd $(PackageSourceDir); \
	$(MakeDepend) $(MakeDependOptions) -f- -p$(PackageTargetDir)/ \
	$(IncludePath) $(Source) > $(DependencyFile) 2> $(DependencyFile).stderr
  
# make lib
lib    : $(PackageListLoop)
	$(Print) Libraries built.
  
_liball : $(JarFile) $(SharedLibrary) $(StaticLibrary)
  
jar : $(JarFile)
  
jarsign : $(JarFile)
	$(JarSigner) -keystore ShortonKeystore $(JarFile) myself
  
# make statistics
_statisticsall :
	@$(Print) $(SourceFiles) >> $(DEV_ROOT)/files.tmp
  
statistics : $(PackageListLoop)
	@$(List) $(DEV_ROOT)/files.tmp | xargs $(WordCount) $(WordCountOptions)
	@$(Delete) $(DEV_ROOT)/files.tmp
	$(Print) Done statistics.
  
# make pure
$(Executable).pure :
	$(Purify) $(PurifyOptions) $(CppCompiler) $(LinkOptions) $(LibDirs) \
	$(LibList) $(ObjectFiles) -o $@
  
pure : $(Executable).pure
  
# Execute
_runexe :
	$(Executable) $(RunParameters)
  
_runjava :
	$(JavaExecute) $(JavaRunOptions) $(JavaMainClass) $(RunParameters)
  
run : _runjava
  
  
ifdef $(DependencyFile)
-include $(DependencyFile)
endif
